--
-- PostgreSQL database dump
--

-- Dumped from database version 11.2
-- Dumped by pg_dump version 11.2

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: process_note_backup(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.process_note_backup() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    INSERT INTO note_versions(note_id, content, updated_on) VALUES (NEW.note_id, NEW.content, NEW.lastupdated); RETURN NEW;
END;
$$;


ALTER FUNCTION public.process_note_backup() OWNER TO postgres;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: account; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.account (
    account_id uuid NOT NULL,
    username character varying(50) NOT NULL,
    password character varying(50) NOT NULL,
    email character varying(80) NOT NULL,
    created_on timestamp without time zone NOT NULL,
    last_sign_in timestamp without time zone,
    settings_id uuid,
    deleted_on timestamp without time zone,
    user_id uuid NOT NULL,
    CONSTRAINT account_check CHECK (((length((username)::text) >= 5) AND (length((password)::text) >= 5) AND (length((email)::text) >= 6))),
    CONSTRAINT account_email_check CHECK (((email)::text ~* '^.+@[^\.].*\.[a-z]{2,}$'::text))
);


ALTER TABLE public.account OWNER TO postgres;

--
-- Name: category; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.category (
    category_id uuid NOT NULL,
    user_id uuid NOT NULL,
    category character varying(50) NOT NULL,
    description text,
    category_color character varying(30),
    text_color character varying(30),
    backgroundimage_id uuid,
    CONSTRAINT category_category_check CHECK ((length((category)::text) >= 3))
);


ALTER TABLE public.category OWNER TO postgres;

--
-- Name: deleted_notes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.deleted_notes (
    deleted_note_id uuid NOT NULL,
    deleted_on timestamp without time zone NOT NULL
);


ALTER TABLE public.deleted_notes OWNER TO postgres;

--
-- Name: file; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.file (
    file_id uuid NOT NULL,
    url character varying(200) NOT NULL,
    size integer,
    name character varying(100),
    inserted_on timestamp without time zone NOT NULL
);


ALTER TABLE public.file OWNER TO postgres;

--
-- Name: group_data; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.group_data (
    group_id uuid NOT NULL,
    group_name character varying(50) NOT NULL,
    created_on timestamp without time zone NOT NULL,
    CONSTRAINT group_data_group_name_check CHECK ((length((group_name)::text) >= 3))
);


ALTER TABLE public.group_data OWNER TO postgres;

--
-- Name: image; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.image (
    image_id uuid NOT NULL,
    url character varying(200) NOT NULL,
    size integer,
    name character varying(100),
    inserted_on timestamp without time zone NOT NULL
);


ALTER TABLE public.image OWNER TO postgres;

--
-- Name: note; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.note (
    note_id uuid NOT NULL,
    content text,
    lastupdated timestamp without time zone,
    created_on timestamp without time zone NOT NULL,
    deleted_on timestamp without time zone,
    name character varying(50) DEFAULT 'New Note'::character varying NOT NULL,
    category character varying(50) DEFAULT 'Нет категории'::character varying NOT NULL,
    CONSTRAINT note_name_check CHECK ((length((name)::text) >= 1))
);


ALTER TABLE public.note OWNER TO postgres;

--
-- Name: note_and_file; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.note_and_file (
    record_id integer NOT NULL,
    note_id uuid NOT NULL,
    file_id uuid NOT NULL
);


ALTER TABLE public.note_and_file OWNER TO postgres;

--
-- Name: note_and_file_record_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.note_and_file_record_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.note_and_file_record_id_seq OWNER TO postgres;

--
-- Name: note_and_file_record_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.note_and_file_record_id_seq OWNED BY public.note_and_file.record_id;


--
-- Name: note_and_image; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.note_and_image (
    record_id integer NOT NULL,
    note_id uuid NOT NULL,
    image_id uuid NOT NULL
);


ALTER TABLE public.note_and_image OWNER TO postgres;

--
-- Name: note_and_image_record_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.note_and_image_record_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.note_and_image_record_id_seq OWNER TO postgres;

--
-- Name: note_and_image_record_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.note_and_image_record_id_seq OWNED BY public.note_and_image.record_id;


--
-- Name: note_and_video; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.note_and_video (
    record_id integer NOT NULL,
    note_id uuid NOT NULL,
    video_id uuid NOT NULL
);


ALTER TABLE public.note_and_video OWNER TO postgres;

--
-- Name: note_and_video_record_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.note_and_video_record_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.note_and_video_record_id_seq OWNER TO postgres;

--
-- Name: note_and_video_record_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.note_and_video_record_id_seq OWNED BY public.note_and_video.record_id;


--
-- Name: note_versions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.note_versions (
    note_id uuid NOT NULL,
    content text,
    updated_on timestamp without time zone NOT NULL
);


ALTER TABLE public.note_versions OWNER TO postgres;

--
-- Name: pgbench_accounts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pgbench_accounts (
    aid integer NOT NULL,
    bid integer,
    abalance integer,
    filler character(84)
)
WITH (fillfactor='100');


ALTER TABLE public.pgbench_accounts OWNER TO postgres;

--
-- Name: pgbench_branches; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pgbench_branches (
    bid integer NOT NULL,
    bbalance integer,
    filler character(88)
)
WITH (fillfactor='100');


ALTER TABLE public.pgbench_branches OWNER TO postgres;

--
-- Name: pgbench_history; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pgbench_history (
    tid integer,
    bid integer,
    aid integer,
    delta integer,
    mtime timestamp without time zone,
    filler character(22)
);


ALTER TABLE public.pgbench_history OWNER TO postgres;

--
-- Name: pgbench_tellers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.pgbench_tellers (
    tid integer NOT NULL,
    bid integer,
    tbalance integer,
    filler character(84)
)
WITH (fillfactor='100');


ALTER TABLE public.pgbench_tellers OWNER TO postgres;

--
-- Name: settings; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.settings (
    settings_id uuid NOT NULL,
    profileimage_id uuid,
    themeimage_id uuid,
    show_personal_info boolean DEFAULT true NOT NULL,
    see_last_login boolean DEFAULT true NOT NULL,
    defer_account_delete boolean DEFAULT false NOT NULL,
    defer_note_delete boolean DEFAULT false NOT NULL
);


ALTER TABLE public.settings OWNER TO postgres;

--
-- Name: user_and_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_and_group (
    record_id integer NOT NULL,
    user_id uuid NOT NULL,
    group_id uuid NOT NULL,
    status character varying(30) NOT NULL,
    entered_on timestamp without time zone NOT NULL,
    CONSTRAINT user_and_group_status_check CHECK ((((status)::text = 'creator'::text) OR ((status)::text = 'admin'::text) OR ((status)::text = 'slave'::text)))
);


ALTER TABLE public.user_and_group OWNER TO postgres;

--
-- Name: user_and_group_record_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_and_group_record_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_and_group_record_id_seq OWNER TO postgres;

--
-- Name: user_and_group_record_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_and_group_record_id_seq OWNED BY public.user_and_group.record_id;


--
-- Name: user_and_note; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_and_note (
    record_id integer NOT NULL,
    user_id uuid NOT NULL,
    note_id uuid NOT NULL,
    status character varying(20) NOT NULL,
    CONSTRAINT user_and_note_status_check CHECK ((((status)::text = 'owner'::text) OR ((status)::text = 'reader'::text) OR ((status)::text = 'writer'::text)))
);


ALTER TABLE public.user_and_note OWNER TO postgres;

--
-- Name: user_and_note_record_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_and_note_record_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_and_note_record_id_seq OWNER TO postgres;

--
-- Name: user_and_note_record_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_and_note_record_id_seq OWNED BY public.user_and_note.record_id;


--
-- Name: user_data; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_data (
    user_id uuid NOT NULL,
    firstname character varying(50),
    lastname character varying(50),
    phone character varying(25),
    about_me text,
    CONSTRAINT user_data_phone_check CHECK (((phone)::text ~* '^((8|\+38)-?)?(\(?0\d{2}\)?)?-?\d{3}-?\d{2}-?\d{2}$'::text))
);


ALTER TABLE public.user_data OWNER TO postgres;

--
-- Name: video; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.video (
    video_id uuid NOT NULL,
    url character varying(200) NOT NULL,
    size integer,
    name character varying(100),
    inserted_on timestamp without time zone NOT NULL
);


ALTER TABLE public.video OWNER TO postgres;

--
-- Name: note_and_file record_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_file ALTER COLUMN record_id SET DEFAULT nextval('public.note_and_file_record_id_seq'::regclass);


--
-- Name: note_and_image record_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_image ALTER COLUMN record_id SET DEFAULT nextval('public.note_and_image_record_id_seq'::regclass);


--
-- Name: note_and_video record_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_video ALTER COLUMN record_id SET DEFAULT nextval('public.note_and_video_record_id_seq'::regclass);


--
-- Name: user_and_group record_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_group ALTER COLUMN record_id SET DEFAULT nextval('public.user_and_group_record_id_seq'::regclass);


--
-- Name: user_and_note record_id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_note ALTER COLUMN record_id SET DEFAULT nextval('public.user_and_note_record_id_seq'::regclass);

SELECT pg_catalog.setval('public.note_and_file_record_id_seq', 1, false);


--
-- Name: note_and_image_record_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.note_and_image_record_id_seq', 33, true);


--
-- Name: note_and_video_record_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.note_and_video_record_id_seq', 4, true);


--
-- Name: user_and_group_record_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_and_group_record_id_seq', 1, false);


--
-- Name: user_and_note_record_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_and_note_record_id_seq', 56, true);


--
-- Name: account account_email_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.account
    ADD CONSTRAINT account_email_key UNIQUE (email);


--
-- Name: account account_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.account
    ADD CONSTRAINT account_pkey PRIMARY KEY (account_id);


--
-- Name: account account_settings_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.account
    ADD CONSTRAINT account_settings_id_key UNIQUE (settings_id);


--
-- Name: account account_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.account
    ADD CONSTRAINT account_user_id_key UNIQUE (user_id);


--
-- Name: account account_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.account
    ADD CONSTRAINT account_username_key UNIQUE (username);


--
-- Name: category category_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category
    ADD CONSTRAINT category_pkey PRIMARY KEY (category_id);


--
-- Name: category category_user_id_category_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category
    ADD CONSTRAINT category_user_id_category_key UNIQUE (user_id, category);


--
-- Name: deleted_notes deleted_notes_deleted_note_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.deleted_notes
    ADD CONSTRAINT deleted_notes_deleted_note_id_key UNIQUE (deleted_note_id);


--
-- Name: file file_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.file
    ADD CONSTRAINT file_pkey PRIMARY KEY (file_id);


--
-- Name: file file_url_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.file
    ADD CONSTRAINT file_url_key UNIQUE (url);


--
-- Name: group_data group_data_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.group_data
    ADD CONSTRAINT group_data_pkey PRIMARY KEY (group_id);


--
-- Name: image image_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.image
    ADD CONSTRAINT image_pkey PRIMARY KEY (image_id);


--
-- Name: image image_url_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.image
    ADD CONSTRAINT image_url_key UNIQUE (url);


--
-- Name: note_and_file note_and_file_note_id_file_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_file
    ADD CONSTRAINT note_and_file_note_id_file_id_key UNIQUE (note_id, file_id);


--
-- Name: note_and_file note_and_file_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_file
    ADD CONSTRAINT note_and_file_pkey PRIMARY KEY (record_id);


--
-- Name: note_and_image note_and_image_note_id_image_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_image
    ADD CONSTRAINT note_and_image_note_id_image_id_key UNIQUE (note_id, image_id);


--
-- Name: note_and_image note_and_image_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_image
    ADD CONSTRAINT note_and_image_pkey PRIMARY KEY (record_id);


--
-- Name: note_and_video note_and_video_note_id_video_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_video
    ADD CONSTRAINT note_and_video_note_id_video_id_key UNIQUE (note_id, video_id);


--
-- Name: note_and_video note_and_video_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_video
    ADD CONSTRAINT note_and_video_pkey PRIMARY KEY (record_id);


--
-- Name: note note_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note
    ADD CONSTRAINT note_pkey PRIMARY KEY (note_id);


--
-- Name: pgbench_accounts pgbench_accounts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pgbench_accounts
    ADD CONSTRAINT pgbench_accounts_pkey PRIMARY KEY (aid);


--
-- Name: pgbench_branches pgbench_branches_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pgbench_branches
    ADD CONSTRAINT pgbench_branches_pkey PRIMARY KEY (bid);


--
-- Name: pgbench_tellers pgbench_tellers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.pgbench_tellers
    ADD CONSTRAINT pgbench_tellers_pkey PRIMARY KEY (tid);


--
-- Name: settings settings_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.settings
    ADD CONSTRAINT settings_pkey PRIMARY KEY (settings_id);


--
-- Name: user_and_group user_and_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_group
    ADD CONSTRAINT user_and_group_pkey PRIMARY KEY (record_id);


--
-- Name: user_and_group user_and_group_user_id_group_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_group
    ADD CONSTRAINT user_and_group_user_id_group_id_key UNIQUE (user_id, group_id);


--
-- Name: user_and_note user_and_note_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_note
    ADD CONSTRAINT user_and_note_pkey PRIMARY KEY (record_id);


--
-- Name: user_and_note user_and_note_user_id_note_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_note
    ADD CONSTRAINT user_and_note_user_id_note_id_key UNIQUE (user_id, note_id);


--
-- Name: user_data user_data_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_data
    ADD CONSTRAINT user_data_pkey PRIMARY KEY (user_id);


--
-- Name: video video_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.video
    ADD CONSTRAINT video_pkey PRIMARY KEY (video_id);


--
-- Name: video video_url_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.video
    ADD CONSTRAINT video_url_key UNIQUE (url);


--
-- Name: note note_backup_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER note_backup_trigger AFTER UPDATE ON public.note FOR EACH ROW EXECUTE PROCEDURE public.process_note_backup();


--
-- Name: account account_settings_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.account
    ADD CONSTRAINT account_settings_id_fkey FOREIGN KEY (settings_id) REFERENCES public.settings(settings_id);


--
-- Name: account account_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.account
    ADD CONSTRAINT account_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_data(user_id);


--
-- Name: category category_backgroundimage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category
    ADD CONSTRAINT category_backgroundimage_id_fkey FOREIGN KEY (backgroundimage_id) REFERENCES public.image(image_id);


--
-- Name: category category_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category
    ADD CONSTRAINT category_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_data(user_id);


--
-- Name: deleted_notes deleted_notes_deleted_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.deleted_notes
    ADD CONSTRAINT deleted_notes_deleted_note_id_fkey FOREIGN KEY (deleted_note_id) REFERENCES public.note(note_id);


--
-- Name: note_and_file note_and_file_file_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_file
    ADD CONSTRAINT note_and_file_file_id_fkey FOREIGN KEY (file_id) REFERENCES public.file(file_id);


--
-- Name: note_and_file note_and_file_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_file
    ADD CONSTRAINT note_and_file_note_id_fkey FOREIGN KEY (note_id) REFERENCES public.note(note_id);


--
-- Name: note_and_image note_and_image_image_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_image
    ADD CONSTRAINT note_and_image_image_id_fkey FOREIGN KEY (image_id) REFERENCES public.image(image_id);


--
-- Name: note_and_image note_and_image_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_image
    ADD CONSTRAINT note_and_image_note_id_fkey FOREIGN KEY (note_id) REFERENCES public.note(note_id);


--
-- Name: note_and_video note_and_video_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_video
    ADD CONSTRAINT note_and_video_note_id_fkey FOREIGN KEY (note_id) REFERENCES public.note(note_id);


--
-- Name: note_and_video note_and_video_video_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_and_video
    ADD CONSTRAINT note_and_video_video_id_fkey FOREIGN KEY (video_id) REFERENCES public.video(video_id);


--
-- Name: note_versions note_versions_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.note_versions
    ADD CONSTRAINT note_versions_note_id_fkey FOREIGN KEY (note_id) REFERENCES public.note(note_id);


--
-- Name: settings settings_profileimage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.settings
    ADD CONSTRAINT settings_profileimage_id_fkey FOREIGN KEY (profileimage_id) REFERENCES public.image(image_id);


--
-- Name: settings settings_themeimage_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.settings
    ADD CONSTRAINT settings_themeimage_id_fkey FOREIGN KEY (themeimage_id) REFERENCES public.image(image_id);


--
-- Name: user_and_group user_and_group_group_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_group
    ADD CONSTRAINT user_and_group_group_id_fkey FOREIGN KEY (group_id) REFERENCES public.group_data(group_id);


--
-- Name: user_and_group user_and_group_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_group
    ADD CONSTRAINT user_and_group_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_data(user_id);


--
-- Name: user_and_note user_and_note_note_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_note
    ADD CONSTRAINT user_and_note_note_id_fkey FOREIGN KEY (note_id) REFERENCES public.note(note_id);


--
-- Name: user_and_note user_and_note_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_and_note
    ADD CONSTRAINT user_and_note_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_data(user_id);


--
-- PostgreSQL database dump complete
--

